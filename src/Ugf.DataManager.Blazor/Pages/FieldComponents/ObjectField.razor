@using System.Collections
@using Secyud.Ugf
@using Secyud.Ugf.DataManager
@using Ugf.DataManager.Blazor.ClassManagement
@using Ugf.DataManager.ClassManagement
@implements IDataField

<Accordion>
    <Collapse>
        <CollapseHeader>
            <Heading Size="HeadingSize.Is5">
                <AccordionToggle>
                    <Tooltip Text="@FieldTypeMessage?.Description">
                        @($"{FieldDescriptor.Info.Name}({FieldTypeMessage?.Name ?? "*"})({FieldObject?.GetType().Name ?? "null"})")
                    </Tooltip>
                </AccordionToggle>
            </Heading>
        </CollapseHeader>
        <CollapseBody>
            @switch (FieldObject)
            {
                case null:
                {
                    <ClassSelector
                        BaseClass="@FieldDescriptor.Info.FieldType"
                        EnsureAction="id => SetObject(FieldDescriptor, id)"/>
                    break;
                }
                case IList {IsFixedSize: true } list:
                {
                    Type baseClass = FieldDescriptor.Info.FieldType.GetElementType();
                    if (baseClass is null) break;

                    <Divider/>
                    <Accordion>
                        @for (int i = 0; i < list.Count; i++)
                        {
                            int index = i;
                            object subO = list[i];

                            <Collapse>
                                <CollapseHeader>
                                    <Heading>
                                        <AccordionToggle>
                                            @($"{FieldDescriptor.Info.Name}[{index}] ({subO?.GetType().Name})")
                                        </AccordionToggle>
                                    </Heading>
                                </CollapseHeader>
                                <CollapseBody>
                                    @if (subO is null)
                                    {
                                        <ClassSelector Placeholder="@baseClass.Name" BaseClass="baseClass"
                                                       EnsureAction="id => list[index] = CreateObject(id)"/>
                                    }
                                    else
                                    {
                                        <ObjectViewer ViewObject="@subO"
                                                      CloseClicked="() => list[index] = default"/>
                                    }
                                </CollapseBody>
                            </Collapse>
                        }
                    </Accordion>
                    <Divider/>
                    break;
                }
                case IList list:
                {
                    Type baseClass = FieldDescriptor.Info.FieldType.GetGenericArguments().First();

                    <ClassSelector
                        Placeholder="@baseClass.Name" BaseClass="@baseClass"
                        EnsureAction="id => list.Add(CreateObject(id))"/>
                    <Divider/>
                    <Accordion>
                        @for (int i = 0; i < list.Count; i++)
                        {
                            int index = i;
                            object subO = list[index];
                            <Collapse>
                                <CollapseHeader>
                                    <Heading>
                                        <AccordionToggle>
                                            @($"{FieldDescriptor.Info.Name}[{index}] ({subO?.GetType().Name})")
                                        </AccordionToggle>
                                    </Heading>
                                </CollapseHeader>
                                <CollapseBody>
                                    @if (subO is null)
                                    {
                                        <ClassSelector
                                            Placeholder="@baseClass.Name" BaseClass="@baseClass"
                                            EnsureAction="id => list[index] = CreateObject(id)"
                                            CancelAction="() =>  list.RemoveAt(index)"/>
                                    }
                                    else
                                    {
                                        <ObjectViewer ViewObject="@subO"
                                                      CloseClicked="() => list.RemoveAt(index)"/>
                                    }
                                </CollapseBody>
                            </Collapse>
                        }
                    </Accordion>
                    <Divider/>
                    break;
                }
                default:
                {
                    @if (FieldDescriptor.Info.IsInitOnly)
                    {
                        <ObjectViewer ViewObject="@FieldObject"/>
                    }
                    else
                    {
                        <ObjectViewer ViewObject="@FieldObject"
                                      CloseClicked="() => SetObject(FieldDescriptor, default)"/>
                    }
                    break;
                }
            }
        </CollapseBody>
    </Collapse>
</Accordion>

@code{

    [Parameter]
    public SAttribute FieldDescriptor { get; set; }

    [Parameter]
    public ClassPropertyDto FieldTypeMessage { get; set; }

    [Parameter]
    public ObjectDataView ParentObjectData { get; set; }

    private object FieldObject { get; set; }

    public IFluentColumn FieldSize => ColumnSize.IsFull;

    protected override Task OnInitializedAsync()
    {
        FieldObject = ParentObjectData.GetValue<object>(FieldDescriptor);
        return base.OnInitializedAsync();
    }

    public Task SetObject(SAttribute attribute, Guid classId)
    {
        FieldObject = CreateObject(classId);
        attribute.SetValue(ParentObjectData.Obj, FieldObject);
        return InvokeAsync(StateHasChanged);
    }

    public object CreateObject(Guid classId)
    {
        return classId == default ? null : U.Get(U.Tm[classId]);
    }

}