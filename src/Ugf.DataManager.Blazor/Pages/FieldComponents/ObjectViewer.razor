@using Ugf.DataManager.ClassManagement
@using Secyud.Ugf.DataManager
@using Ugf.DataManager.Blazor.ClassManagement
@inject IClassContainerAppService AppService 

@if (_objectData is not null)
{
    <Field ColumnSize="ColumnSize.IsFull">
        <Badge Color="Color.Secondary" CloseClicked="CloseClicked">
            <Tooltip Text="@_objectData.ClassContainerDto?.Description">
                @($"{Prefix}({_objectData.Type.Name})({_objectData.ClassContainerDto?.Name})")
            </Tooltip>
        </Badge>
    </Field>

    @foreach ((ClassPropertyDto property, SAttribute attr)  in _objectData.Properties)
    {
        @switch (attr.Type)
        {
            case FieldType.Object:
                <ObjectField FieldDescriptor="attr" FieldTypeMessage="property"
                             ParentObjectData="_objectData"/>
                break;
            case FieldType.Bool:
                <BooleanField FieldDescriptor="attr" FieldTypeMessage="property"
                              ParentObjectData="_objectData"/>
                break;
            case FieldType.UInt8:
                <IntegerField FieldDescriptor="attr" FieldTypeMessage="property"
                              ParentObjectData="_objectData" TValue="byte"/>
                break;
            case FieldType.UInt16:
                <IntegerField FieldDescriptor="attr" FieldTypeMessage="property"
                              ParentObjectData="_objectData" TValue="ushort"/>
                break;
            case FieldType.UInt32:
                <IntegerField FieldDescriptor="attr" FieldTypeMessage="property"
                              ParentObjectData="_objectData" TValue="uint"/>
                break;
            case FieldType.UInt64:
                <IntegerField FieldDescriptor="attr" FieldTypeMessage="property"
                              ParentObjectData="_objectData" TValue="ulong"/>
                break;
            case FieldType.Int8:
                <IntegerField FieldDescriptor="attr" FieldTypeMessage="property"
                              ParentObjectData="_objectData" TValue="sbyte"/>
                break;
            case FieldType.Int16:
                <IntegerField FieldDescriptor="attr" FieldTypeMessage="property"
                              ParentObjectData="_objectData" TValue="short"/>
                break;
            case FieldType.Int32:
                <IntegerField FieldDescriptor="attr" FieldTypeMessage="property"
                              ParentObjectData="_objectData" TValue="int"/>
                break;
            case FieldType.Int64:
                <IntegerField FieldDescriptor="attr" FieldTypeMessage="property"
                              ParentObjectData="_objectData" TValue="long"/>
                break;
            case FieldType.Single:
                <NumberField FieldDescriptor="attr" FieldTypeMessage="property"
                             ParentObjectData="_objectData" TValue="float"/>
                break;
            case FieldType.Double:
                <NumberField FieldDescriptor="attr" FieldTypeMessage="property"
                             ParentObjectData="_objectData" TValue="double"/>
                break;
            case FieldType.Decimal:
                <NumberField FieldDescriptor="attr" FieldTypeMessage="property"
                             ParentObjectData="_objectData" TValue="decimal"/>
                break;
            case FieldType.String:
                <StringField FieldDescriptor="attr" FieldTypeMessage="property"
                             ParentObjectData="_objectData"/>
                break;
            case FieldType.Guid:
                <GuidField FieldDescriptor="attr" FieldTypeMessage="property"
                           ParentObjectData="_objectData"/>
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }
}

@code{

    [Parameter]
    public object ViewObject { get; set; }

    [Parameter]
    public string Prefix { get; set; }

    [Parameter]
    public EventCallback CloseClicked { get; set; }

    private ObjectDataView _objectData;

    protected override async Task OnInitializedAsync()
    {
        _objectData = await ObjectDataView.CreateAsync(ViewObject, AppService);
    }

}