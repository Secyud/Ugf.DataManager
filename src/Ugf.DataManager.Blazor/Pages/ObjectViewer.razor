@using Secyud.Ugf.DataManager
@using System.Collections
@using Ugf.DataManager.ClassManagement

@switch (Attr.Type)
{
    case FieldType.Object:
        switch (Obj)
        {
            case null:
                <ClassSelector BaseClass="@Attr.Info.FieldType"
                               EnsureAction="id => SetObject(Attr, id)"/>
                break;
            case IList {IsFixedSize: true } list:
            {
                Type baseClass = Attr.Info.FieldType.GetGenericArguments().First();
                for (int i = 0; i < list.Count; i++)
                {
                    int index = i;
                    object subO = list[i];
                    if (subO is null)
                    {
                        <ClassSelector
                            Placeholder="@baseClass.Name" BaseClass="baseClass"
                            EnsureAction="id => list[index] = CreateObject(id)"/>
                    }
                    else
                    {
                        <Field>
                            <Badge Color="@Color.Info"
                                   CloseClicked="() => list.RemoveAt(index)">
                                @subO.GetType().Name
                            </Badge>
                        </Field>
                        <ObjectDataComponent Object="@subO"/>
                    }
                }
                break;
            }
            case IList list:
            {
                Type baseClass = Attr.Info.FieldType.GetGenericArguments().First();
                for (int i = 0; i < list.Count; i++)
                {
                    int index = i;
                    object subO = list[index];
                    <Field>
                        <Badge Color="@Color.Info"
                               CloseClicked="() => list.RemoveAt(index)">
                            @subO?.GetType().Name
                        </Badge>
                    </Field>
                    <ObjectDataComponent Object="@subO"/>
                }

                <ClassSelector
                    Placeholder="@baseClass.Name" BaseClass="@baseClass"
                    EnsureAction="id => list.Add(CreateObject(id))"/>
                break;
            }
            default:
                <Field>
                    <Badge Color="@Color.Info"
                           CloseClicked="() => SetObject(Attr, default)">
                        <Tooltip Text="@Property?.Description">
                            @Obj.GetType().Name
                        </Tooltip>
                    </Badge>
                </Field>
                <ObjectDataComponent Object="@Obj"/>
                break;
        }
        break;
    case FieldType.Bool:
        <Check TValue="bool" Checked="Data.GetValue<bool>(Attr)"
               CheckedChanged="b => Data.SetValue(Attr, b)"/>
        break;
    case FieldType.UInt8:
        if (Property?.Style == EditStyle.FlagOrMemo)
        {
            <BinaryEdit TValue="byte" Value="Data.GetValue<byte>(Attr)"
                        ValueChanged="v => Data.SetValue(Attr, v)">
            </BinaryEdit>
        }
        else
        {
            <NumericEdit TValue="byte" Value="Data.GetValue<byte>(Attr)"
                         ValueChanged="v => Data.SetValue(Attr, v)"/>
        }
        break;
    case FieldType.UInt16:
        if (Property?.Style == EditStyle.FlagOrMemo)
        {
            <BinaryEdit TValue="ushort" Value="Data.GetValue<ushort>(Attr)"
                        ValueChanged="v => Data.SetValue(Attr, v)">
            </BinaryEdit>
        }
        else
        {
            <NumericEdit TValue="ushort" Value="Data.GetValue<ushort>(Attr)"
                         ValueChanged="v => Data.SetValue(Attr, v)"/>
        }
        break;
    case FieldType.UInt32:
        if (Property?.Style == EditStyle.FlagOrMemo)
        {
            <BinaryEdit TValue="uint" Value="Data.GetValue<uint>(Attr)"
                        ValueChanged="v => Data.SetValue(Attr, v)">
            </BinaryEdit>
        }
        else
        {
            <NumericEdit TValue="uint" Value="Data.GetValue<uint>(Attr)"
                         ValueChanged="v => Data.SetValue(Attr, v)"/>
        }
        break;
    case FieldType.UInt64:
        if (Property?.Style == EditStyle.FlagOrMemo)
        {
            <BinaryEdit TValue="ulong" Value="Data.GetValue<ulong>(Attr)"
                        ValueChanged="v => Data.SetValue(Attr, v)">
            </BinaryEdit>
        }
        else
        {
            <NumericEdit TValue="ulong" Value="Data.GetValue<ulong>(Attr)"
                         ValueChanged="v => Data.SetValue(Attr, v)"/>
        }
        break;
    case FieldType.Int8:
        @if (Property?.Style == EditStyle.FlagOrMemo)
        {
            <BinaryEdit TValue="sbyte" Value="Data.GetValue<sbyte>(Attr)"
                        ValueChanged="v => Data.SetValue(Attr, v)">
            </BinaryEdit>
        }
        else
        {
            <NumericEdit TValue="sbyte" Value="Data.GetValue<sbyte>(Attr)"
                         ValueChanged="v => Data.SetValue(Attr, v)"/>
        }
        break;
    case FieldType.Int16:
        if (Property?.Style == EditStyle.FlagOrMemo)
        {
            <BinaryEdit TValue="short" Value="Data.GetValue<short>(Attr)"
                        ValueChanged="v => Data.SetValue(Attr, v)">
            </BinaryEdit>
        }
        else
        {
            <NumericEdit TValue="short" Value="Data.GetValue<short>(Attr)"
                         ValueChanged="v => Data.SetValue(Attr, v)"/>
        }
        break;
    case FieldType.Int32:
        if (Property?.Style == EditStyle.FlagOrMemo)
        {
            <BinaryEdit TValue="int" Value="Data.GetValue<int>(Attr)"
                        ValueChanged="v => Data.SetValue(Attr, v)">
            </BinaryEdit>
        }
        else
        {
            <NumericEdit TValue="int" Value="Data.GetValue<int>(Attr)"
                         ValueChanged="v => Data.SetValue(Attr, v)"/>
        }
        break;
    case FieldType.Int64:
        if (Property?.Style == EditStyle.FlagOrMemo)
        {
            <BinaryEdit TValue="long" Value="Data.GetValue<long>(Attr)"
                        ValueChanged="v => Data.SetValue(Attr, v)">
            </BinaryEdit>
        }
        else
        {
            <NumericEdit TValue="long" Value="Data.GetValue<long>(Attr)"
                         ValueChanged="v => Data.SetValue(Attr, v)"/>
        }
        break;
    case FieldType.Single:
        <NumericEdit TValue="float" Value="Data.GetValue<float>(Attr)"
                     ValueChanged="v => Data.SetValue(Attr, v)"/>
        break;
    case FieldType.Double:
        <NumericEdit TValue="double" Value="Data.GetValue<double>(Attr)"
                     ValueChanged="v => Data.SetValue(Attr, v)"/>
        break;
    case FieldType.Decimal:
        <NumericEdit TValue="decimal" Value="Data.GetValue<decimal>(Attr)"
                     ValueChanged="v => Data.SetValue(Attr, v)"/>
        break;
    case FieldType.String:
        if (Property?.Style == EditStyle.FlagOrMemo)
        {
            string text = Data.GetValue<string>(Attr);
            <MemoEdit Text="@text"
                      TextChanged="v => Data.SetValue(Attr, v)">
            </MemoEdit>
        }
        else
        {
            string text = Data.GetValue<string>(Attr);

            <TextEdit Text="@text"
                      TextChanged="v => Data.SetValue(Attr, v)"/>
        }
        break;
    case FieldType.Guid:
        <GuidEdit Value="Data.GetValue<Guid>(Attr)"
                  ValueChanged="v => Data.SetValue(Attr, v)"/>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}