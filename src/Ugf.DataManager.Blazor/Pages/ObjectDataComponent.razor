@using Ugf.DataManager.ClassManagement
@using Secyud.Ugf.DataManager
@inherits DataManagerComponentBase

@if (_objectDataView is not null)
{
@foreach (Tuple<ClassPropertyDto, SAttribute> p in _objectDataView.Properties)
{
    <Field ColumnSize="ColumnSize.Is6">
        <FieldLabel>
            <Tooltip Text="@p.Item1?.Description"
                     TriggerTargetId="tooltip-custom-target" Inline>
                <Badge Color="Color.Info">@((p.Item1?.Name).IsNullOrEmpty() ? p.Item2.Info.Name : p.Item1?.Name)</Badge>
            </Tooltip>
        </FieldLabel>

        @switch (p.Item2.Type)
        {
            case FieldType.Object:
                object obj = _objectDataView.GetValue<object>(p);
                if (obj is not null)
                {
                    <Button Clicked="() => SetNull(p)">SetNull</Button>
                    <Badge Color="Color.Info">@(obj.GetType().Name)</Badge>
                    <ObjectDataComponent Object="obj"/>
                }
                else
                {
                    <ClassSelector BaseClass="p.Item2.Info.FieldType" EnsureAction="id => CreateAsync(id, p)"/>
                }
                break;
            case FieldType.Bool:
                <Check TValue="bool" Checked="_objectDataView.GetValue<bool>(p)"
                       CheckedChanged="b => _objectDataView.SetValue(p, b)"/>
                break;
            case FieldType.UInt8:
                @if (p.Item2.Style == EditStyle.FlagOrMemo)
                {
                    <BinaryEdit TValue="byte" Value="_objectDataView.GetValue<byte>(p)"
                                ValueChanged="v => _objectDataView.SetValue(p, v)">
                    </BinaryEdit>
                }
                else
                {
                    <NumericEdit TValue="byte" Value="_objectDataView.GetValue<byte>(p)"
                                 ValueChanged="v => _objectDataView.SetValue(p, v)"/>
                }
                break;
            case FieldType.UInt16:
                @if (p.Item2.Style == EditStyle.FlagOrMemo)
                {
                    <BinaryEdit TValue="ushort" Value="_objectDataView.GetValue<ushort>(p)"
                                ValueChanged="v => _objectDataView.SetValue(p, v)">
                    </BinaryEdit>
                }
                else
                {
                    <NumericEdit TValue="ushort" Value="_objectDataView.GetValue<ushort>(p)"
                                 ValueChanged="v => _objectDataView.SetValue(p, v)"/>
                }
                break;
            case FieldType.UInt32:
                @if (p.Item2.Style == EditStyle.FlagOrMemo)
                {
                    <BinaryEdit TValue="uint" Value="_objectDataView.GetValue<uint>(p)"
                                ValueChanged="v => _objectDataView.SetValue(p, v)">
                    </BinaryEdit>
                }
                else
                {
                    <NumericEdit TValue="uint" Value="_objectDataView.GetValue<uint>(p)"
                                 ValueChanged="v => _objectDataView.SetValue(p, v)"/>
                }
                break;
            case FieldType.UInt64:
                @if (p.Item2.Style == EditStyle.FlagOrMemo)
                {
                    <BinaryEdit TValue="ulong" Value="_objectDataView.GetValue<ulong>(p)"
                                ValueChanged="v => _objectDataView.SetValue(p, v)">
                    </BinaryEdit>
                }
                else
                {
                    <NumericEdit TValue="ulong" Value="_objectDataView.GetValue<ulong>(p)"
                                 ValueChanged="v => _objectDataView.SetValue(p, v)"/>
                }
                break;
            case FieldType.Int8:
                @if (p.Item2.Style == EditStyle.FlagOrMemo)
                {
                    <BinaryEdit TValue="sbyte" Value="_objectDataView.GetValue<sbyte>(p)"
                                ValueChanged="v => _objectDataView.SetValue(p, v)">
                    </BinaryEdit>
                }
                else
                {
                    <NumericEdit TValue="sbyte" Value="_objectDataView.GetValue<sbyte>(p)"
                                 ValueChanged="v => _objectDataView.SetValue(p, v)"/>
                }
                break;
            case FieldType.Int16:
                @if (p.Item2.Style == EditStyle.FlagOrMemo)
                {
                    <BinaryEdit TValue="short" Value="_objectDataView.GetValue<short>(p)"
                                ValueChanged="v => _objectDataView.SetValue(p, v)">
                    </BinaryEdit>
                }
                else
                {
                    <NumericEdit TValue="short" Value="_objectDataView.GetValue<short>(p)"
                                 ValueChanged="v => _objectDataView.SetValue(p, v)"/>
                }
                break;
            case FieldType.Int32:
                @if (p.Item2.Style == EditStyle.FlagOrMemo)
                {
                    <BinaryEdit TValue="int" Value="_objectDataView.GetValue<int>(p)"
                                ValueChanged="v => _objectDataView.SetValue(p, v)">
                    </BinaryEdit>
                }
                else
                {
                    <NumericEdit TValue="int" Value="_objectDataView.GetValue<int>(p)"
                                 ValueChanged="v => _objectDataView.SetValue(p, v)"/>
                }
                break;
            case FieldType.Int64:
                @if (p.Item2.Style == EditStyle.FlagOrMemo)
                {
                    <BinaryEdit TValue="long" Value="_objectDataView.GetValue<long>(p)"
                                ValueChanged="v => _objectDataView.SetValue(p, v)">
                    </BinaryEdit>
                }
                else
                {
                    <NumericEdit TValue="long" Value="_objectDataView.GetValue<long>(p)"
                                 ValueChanged="v => _objectDataView.SetValue(p, v)"/>
                }
                break;
            case FieldType.Single:
                    <NumericEdit TValue="float" Value="_objectDataView.GetValue<float>(p)"
                                 ValueChanged="v => _objectDataView.SetValue(p, v)"/>
                break;
            case FieldType.Double:
                    <NumericEdit TValue="double" Value="_objectDataView.GetValue<double>(p)"
                                 ValueChanged="v => _objectDataView.SetValue(p, v)"/>
                break;
            case FieldType.Decimal:
                    <NumericEdit TValue="decimal" Value="_objectDataView.GetValue<decimal>(p)"
                                 ValueChanged="v => _objectDataView.SetValue(p, v)"/>
                break;
            case FieldType.String:
                @if (p.Item2.Style == EditStyle.FlagOrMemo)
                {
                    string text = _objectDataView.GetValue<string>(p);
                    <MemoEdit Text="@text"
                               TextChanged="v => _objectDataView.SetValue(p, v)">
                    </MemoEdit>
                }
                else
                {string text = _objectDataView.GetValue<string>(p);

                    <TextEdit Text="@text"
                              TextChanged="v => _objectDataView.SetValue(p, v)"/>
                }
                break;
            case FieldType.Guid:
                    <GuidEdit Value="_objectDataView.GetValue<Guid>(p)"
                              ValueChanged="v => _objectDataView.SetValue(p, v)"/>
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    </Field>
}
}