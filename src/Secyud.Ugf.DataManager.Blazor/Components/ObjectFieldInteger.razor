@using Secyud.Ugf.DataManager
@inherits ObjectFieldBase
@typeparam TInteger where TInteger :struct
<Field ColumnSize="ColumnSize.IsAuto">
    <FieldLabel>
        @LabelText
    </FieldLabel>
    <FieldBody>
        @if (FieldAttribute.ShowType == SShowType.Special)
        {
            <TextEdit @bind-Text="BinaryValue"
                      MaskType="MaskType.RegEx"
                      EditMask="^[0-1]*$"/>
        }
        else
        {
            <NumericEdit TValue="TInteger" @bind-Value="@Value"/>
        }
    </FieldBody>
    <FieldHelp>
        @Description
    </FieldHelp>
</Field>

@code {
    public TInteger Value
    {
        get => (TInteger)GetValue();
        set => SetValue(value);
    }

    private string BinaryValue
    {
        get => Convert.ToString(Convert.ToInt64(Value), 2);
        set
        {
            try
            {
                long integer = Convert.ToInt64(value, 2);
                Value = (TInteger)Convert.ChangeType(integer, typeof(TInteger));
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }
}